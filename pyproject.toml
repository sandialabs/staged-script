[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "staged-script"
version = "1.0.2"
license = "LICENSE.md"
readme = "README.md"
keywords = [
    "automation",
    "command",
    "execution",
    "repeatability",
    "replicability",
    "reproducibility",
    "pipeline",
    "retry",
    "scripting",
    "shell",
    "stages",
]
repository = "https://github.com/sandialabs/staged-script"
description = """
A Python package enabling the development of robust automation scripts that \
are subdivided into stages."""
documentation = "https://staged-script.readthedocs.io"
authors = [
    "Jason M. Gates <jmgate@sandia.gov>"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development",
    "Topic :: Software Development :: Debuggers",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: System :: Shells",
    "Topic :: System :: System Shells",
    "Typing :: Typed",
]


[tool.poetry.urls]
CI = "https://github.com/sandialabs/staged-script/actions"
Issues = "https://github.com/sandialabs/staged-script/issues"


[tool.poetry.dependencies]
python = ">=3.8"
reverse-argparse = "*"
rich = "*"
tenacity = "*"


[tool.ruff]
line-length = 79


[tool.ruff.lint]
extend-select = [
    "A",
    "B",
    "BLE",
    "C4",
    "C90",
    "D",
    "DTZ",
    "E",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "NPY",
    "PGH",
    "PL",
    "PT",
    "PTH",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "TID",
    "TCH",
    "TRY",
    "UP",
    "W",
]
ignore = [
    "D212",
]


[tool.ruff.lint.per-file-ignores]
"**/test_*.py" = ["S101"]
"example/*.py" = [
    "D101",
    "D102",
    "D103",
    "D107",
    "S603",
    "S604",
]


[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.semantic_release]
build_command = "python3 -m pip install poetry && poetry build"
commit_message = """
chore: Release v{version}

Automatically generated by python-semantic-release."""
version_variables = [
    "doc/source/conf.py:version",
    "staged_script/__init__.py:__version__",
]
version_toml = [
    "pyproject.toml:tool.poetry.version",
]


[tool.semantic_release.branches.master]
match = "master"


[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "Merge pull request",
]


[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"


[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "minor",
    "patch",
    "perf",
    "refactor",
    "style",
    "test",
]
minor_tags = ["feat", "minor"]
patch_tags = ["fix", "patch", "perf"]
